const express = require('express');
const {
  Bot,
  webhookCallback,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require('grammy');
const { getRandomQuestion } = require('./utils.js');
require('dotenv').config();

const bot = new Bot(process.env.BOT_API_TOKEN);

bot.command('start', async (ctx) => {
  const startKB = new Keyboard().text('HTML').text('CSS').row().text('JS').text('React').resized();
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø - –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–Ω—Ç–µ—Ä–≤—å—é –±–æ—Ç ü§ñ \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'
  );
  await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá', {
    reply_markup: startKB,
  });
});

bot.hears(['HTML', 'CSS', 'JS', 'React'], async (ctx) => {
  const topic = ctx.message.text;
  const question = getRandomQuestion(topic);
  const inlineKB = new InlineKeyboard()
    .text(
      '–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç',
      JSON.stringify({
        question_id: question.id,
        type: ctx.message.text,
      })
    )
    .text('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel');
  await ctx.reply(question.text, {
    reply_markup: inlineKB,
  });
});

bot.on('callback_query:data', async (ctx) => {
  if (ctx.callbackQuery.data === 'cancel') {
    await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ');
    await ctx.answerCallbackQuery();
    return;
  }

  const CBData = JSON.parse(ctx.callbackQuery.data);
  await ctx.reply(`${CBData.type} - —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞`);
  await ctx.answerCallbackQuery();
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', e.description);
  } else if (e instanceof HttpError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', e);
  } else {
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  // Railway = webhook
  const app = express();

  // Webhook middleware –æ—Ç grammy
  app.use(express.json());
  app.use('/webhook', webhookCallback(bot, 'express'));

  const port = process.env.PORT || 3000;
  app.listen(port, () => {
    console.log(`‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  });
} else {
  // –õ–æ–∫–∞–ª—å–Ω–æ = polling
  bot.start();
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling');
}
