const express = require('express');
const {
  Bot,
  webhookCallback,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require('grammy');
const { getRandomQuestion, getCorrectAnswer } = require('./utils.js');
require('dotenv').config();

const bot = new Bot(process.env.BOT_API_TOKEN);

bot.command('start', async (ctx) => {
  const startKB = new Keyboard()
    .text('HTML')
    .text('CSS')
    .row()
    .text('JavaScript')
    .text('React')
    .row()
    .text('–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
    .resized();
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø - –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–Ω—Ç–µ—Ä–≤—å—é –±–æ—Ç ü§ñ \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É'
  );
  await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá', {
    reply_markup: startKB,
  });
});

bot.hears(['HTML', 'CSS', 'JavaScript', 'React', '–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å'], async (ctx) => {
  const topic = ctx.message.text.toLowerCase();
  const { question, questionTopic } = getRandomQuestion(topic);

  let inlineKB;

  if (question.hasOptions) {
    const buttonRows = question.options.map((option) => [
      InlineKeyboard.text(
        option.text,
        JSON.stringify({
          questionId: question.id,
          type: `${questionTopic}-option`,
          isCorrect: option.isCorrect,
        })
      ),
    ]);

    inlineKB = InlineKeyboard.from(buttonRows);
  } else {
    inlineKB = new InlineKeyboard().text(
      '–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç',
      JSON.stringify({
        questionId: question.id,
        type: questionTopic,
      })
    );
  }

  await ctx.reply(question.text, {
    reply_markup: inlineKB,
  });
});

bot.on('callback_query:data', async (ctx) => {
  const callBackData = JSON.parse(ctx.callbackQuery.data);
  if (!callBackData.type.includes('option')) {
    const answer = getCorrectAnswer(callBackData.type, callBackData.questionId);
    await ctx.reply(answer, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
    await ctx.answerCallbackQuery();
    return;
  }

  if (callBackData.isCorrect) {
    await ctx.reply('–í–µ—Ä–Ω–æ ‚úÖ');
    await ctx.answerCallbackQuery();
    return;
  }

  const answer = getCorrectAnswer(callBackData.type.split('-')[0], callBackData.questionId);
  await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`);
  await ctx.answerCallbackQuery();
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', e.description);
  } else if (e instanceof HttpError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:', e);
  } else {
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  // Railway = webhook
  const app = express();

  // Webhook middleware –æ—Ç grammy
  app.use(express.json());
  app.use('/webhook', webhookCallback(bot, 'express'));

  const port = process.env.PORT || 3000;
  app.listen(port, () => {
    console.log(`‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  });
} else {
  // –õ–æ–∫–∞–ª—å–Ω–æ = polling
  bot.start();
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling');
}
